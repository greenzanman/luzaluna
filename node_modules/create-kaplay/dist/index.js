#!/usr/bin/env node
import N from "node:child_process";
import h from "node:fs";
import T from "node:https";
import w from "node:path";
function W() {
  if (!process.env.npm_config_user_agent) return;
  const e = process.env.npm_config_user_agent.split(" ")[0], t = e.substring(0, e.lastIndexOf("/"));
  return t === "npminstall" ? "cnpm" : t;
}
const z = {
  npm: "install",
  yarn: "add",
  pnpm: "install",
  bun: "install",
  cnpm: "install"
}, U = (e) => ({
  npm: `run ${e}`,
  yarn: `${e}`,
  pnpm: `run ${e}`,
  bun: `run ${e}`,
  cnpm: `run ${e}`
}), J = {
  npm: "npx",
  yarn: "yarn",
  pnpm: "pnpm",
  bun: "bunx",
  cnpm: "cnpm"
}, B = `import kaplay from "kaplay";
// import "kaplay/global"; // uncomment if you want to use without the k. prefix

const k = kaplay();

k.loadRoot("./"); // A good idea for Itch.io publishing later
k.loadSprite("bean", "sprites/bean.png");

k.add([k.pos(120, 80), k.sprite("bean")]);

k.onClick(() => k.addKaboom(k.mousePos()));
`, K = `import { defineConfig } from "vite";

const kaplayCongrats = () => {
    return {
        name: "vite-plugin-kaplay-hello",
        buildEnd() {
            const line =
                "---------------------------------------------------------";
            const msg = \`ðŸ¦– Awesome pal! Send your game to us:\\n\\nðŸ’Ž Discord: https://discord.com/invite/aQ6RuQm3TF \\nðŸ’– Donate to KAPLAY: https://opencollective.com/kaplay\\n\\ (you can disable this msg on vite.config)\`;

            process.stdout.write(\`\\n\${line}\\n\${msg}\\n\${line}\\n\`);
        },
    };
};

export default defineConfig({
    // index.html out file will start with a relative path for script
    base: "./",
    server: {
        port: 3001,
    },
    build: {
        // disable this for low bundle sizes
        sourcemap: true,
        rollupOptions: {
            output: {
                manualChunks: {
                    kaplay: ["kaplay"],
                },
            },
        },
    },
    plugins: [
        // Disable messages removing this line
        kaplayCongrats(),
    ],
});
`, Y = "3.1.0", o = W() ?? "npm", j = J[o], A = z[o], q = U("dev")[o], D = "https://raw.githubusercontent.com/kaplayjs/kaplay/master/examples", Q = process.cwd(), c = (e, t) => `\x1B[${e}m${t}\x1B[0m`, P = /^win/.test(process.platform), f = (e, t) => {
  console.error(c(31, e)), t && console.error(`
` + S), process.exit(1);
}, r = (e) => console.log(c(33, e)), u = (e) => {
  a.verbose && console.log(c(90, e));
}, C = (e) => P ? `"${e}"` : e, O = [
  { long: "help", short: "h", desc: "Print this message" },
  { long: "typescript", short: "t", desc: "Use TypeScript" },
  {
    long: "desktop",
    short: "d",
    desc: "Enable packaging for desktop with tauri"
  },
  {
    long: "example",
    short: "e",
    value: "name",
    desc: "Start from an example listed on play.kaplayjs.com"
  },
  {
    long: "spaces",
    short: "s",
    value: "level",
    desc: "Use spaces instead of tabs for generated files"
  },
  {
    long: "version",
    short: "v",
    value: "label",
    desc: "Use a specific kaplay version (default latest)"
  },
  {
    long: "verbose",
    short: "verb",
    desc: "Print additional information"
  }
], _ = O.map((e) => ({
  usage: `${e.short ? `-${e.short},` : "   "} --${e.long}${e.value ? ` <${e.value}>` : ""}`,
  desc: e.desc
})), G = _.reduce(
  (e, t) => t.usage.length > e ? t.usage.length : e,
  0
), S = `
create-kaplay v${Y} ${o}

${c(32, "USAGE ðŸ¦–")}

  $ create-kaplay [OPTIONS] <dir>

${c(32, "OPTIONS")}

  ${_.map(
  (e) => `${c(32, e.usage)} ${" ".repeat(G - e.usage.length)} ${e.desc}`
).join(`
  `)}

${c(32, "EXAMPLE")}
  ${c(90, "# quick start with default config")}
  $ create-kaplay my-game

  ${c(90, "# calling with options")}
  $ create-kaplay --typescript --spaces 4 --desktop --example burp my-game
`.trim(), a = {}, R = [];
e: for (let e = 2; e < process.argv.length; e++) {
  const t = process.argv[e];
  if (t.startsWith("-")) {
    for (const n of O)
      if (t === `--${n.long}` || t === `-${n.short}`) {
        if (n.value) {
          const i = process.argv[++e];
          i || f(`Expected value after ${t}`), a[n.long] = i;
        } else
          a[n.long] = !0;
        continue e;
      }
    f(`Unknown option "${t}"`, !0);
  } else
    R.push(t);
}
a.help && (console.log(S), process.exit());
const l = R[0];
l || (console.log(S), process.exit());
h.existsSync(l) && f(`Directory "${l}" already exists!`);
const b = (e) => JSON.stringify(e, null, a.spaces ? 4 : "	"), y = a.typescript, g = a.desktop, $ = y ? "ts" : "js", x = async (e, t) => new Promise((n, i) => {
  const s = h.createWriteStream(t);
  T.get(e, (m) => {
    m.statusCode !== 200 && i(m.statusMessage), m.pipe(s), s.on("finish", () => {
      s.close(), n();
    });
  });
}), k = async (e, t, n) => (u(`- running ${e} ${t.join(" ")}`), new Promise((i) => {
  const s = N.spawn(e, t, {
    ...n,
    ...P ? { shell: !0 } : {}
  });
  u(`- spawned process ${s.pid} ${e} ${t.join(" ")}`), s.on("exit", i), s.on("error", f);
})), V = (e, t) => {
  const n = JSON.parse(h.readFileSync(e, "utf8"));
  h.writeFileSync(e, b(t(n)));
};
let v = B;
const F = /load(Sprite|Sound|Shader|Aseprite|Font|BitmapFont)\("([^"]+)",\s*"([^"]+)"\)/gm;
if (a.example) {
  r(`- fetching example "${a.example}"`);
  const e = await fetch(`${D}/${a.example}.js`), t = await e.text();
  e.ok || f(
    `Example "${a.example}" not found. Check https://github.com/kaplayjs/kaplay/tree/master/examples for available examples`
  ), v = `import kaplay from "kaplay"
import "kaplay/global";

` + t;
}
const E = [];
for (const e of v.matchAll(F)) {
  const [t, n, i, s] = e;
  s.startsWith("/sprites") || E.includes(s.split("/")[2]) || E.push(s.split("/")[2]);
}
const I = [`kaplay@${a.version ?? "latest"}`], L = [
  "vite@latest",
  "@types/node@latest",
  ...y ? ["typescript@latest"] : [],
  ...g ? ["@tauri-apps/cli@1"] : []
], d = (e, t) => ({
  type: "file",
  name: e,
  content: t.trim()
}), p = (e, t) => ({
  type: "dir",
  name: e,
  items: t
}), M = (e) => {
  if (e.type === "dir")
    h.mkdirSync(e.name), process.chdir(e.name), e.items.forEach(M), process.chdir("..");
  else if (e.type === "file") {
    const t = a.spaces ? e.content.replaceAll("	", " ".repeat(a.spaces)) : e.content, n = process.cwd().replace(new RegExp(`^${Q}/`), "");
    r(`- creating ${n}/${e.name}`), h.writeFileSync(e.name, t);
  }
};
M(
  p(l, [
    d(
      "package.json",
      b({
        name: l,
        type: "module",
        scripts: {
          build: "vite build",
          dev: "vite",
          preview: "vite preview",
          zip: `${o} run build && mkdir -p dist && zip -r dist/game.zip dist -x "**/.DS_Store"`,
          ...y ? {
            check: "tsc"
          } : {},
          ...g ? {
            "dev:desktop": "tauri dev",
            "build:desktop": "tauri build"
          } : {}
        }
      })
    ),
    d(`vite.config.${$}`, K),
    d(
      "index.html",
      `
<!DOCTYPE html>
<html>
<head>
<title>${l}</title>
</head>
<body style="overflow:hidden">
<script src="src/main.${$}" type="module"><\/script>
</body>
</html>
    `
    ),
    p("public", [
      p("sprites", []),
      // TODO: Create this folders if only needed
      p("examples", [
        p("sprites", []),
        p("sounds", []),
        p("fonts", []),
        p("shaders", [])
      ])
    ]),
    p("src", [d(`main.${$}`, v)]),
    d("README.md", ""),
    ...y ? [
      d(
        "tsconfig.json",
        b({
          compilerOptions: {
            noEmit: !0,
            target: "esnext",
            moduleResolution: "node"
          },
          include: ["src/**/*.ts"]
        })
      )
    ] : [],
    d(
      ".gitignore",
      `
node_modules/
dist/
.DS_Store
${g ? "src-tauri/target/" : ""}
	`
    ),
    d(
      "README.md",
      `
# Folder structure

- \`src\` - source code for your kaplay project
- \`dist\` - distribution folder, contains your index.html, built js bundle and static assets
${g ? "- `src-tauri` - tauri project folder, contains tauri config file, icons, rust source if you need native code" : ""}

## Development

\`\`\`sh
$ ${o} run dev
\`\`\`

will start a dev server at http://localhost:8000

## Distribution

\`\`\`sh
$ ${o} run build
\`\`\`

will build your js files into \`dist/\`

\`\`\`sh
$ ${o} run zip
\`\`\`

will build your game and package into a .zip file, you can upload to your server or itch.io / newground etc.

${g ? `
## Desktop

This project uses tauri for desktop builds, you have to have \`rust\` installed on your system for desktop to work, check out [tauri setup guide](https://tauri.app/v1/guides/getting-started/prerequisites/)

For tauri native APIs look [here](https://tauri.app/v1/api/js/)

\`\`\`sh
$ ${o} run dev:desktop
\`\`\`

will start the dev server and a native window that servers content from that dev server

\`\`\`sh
$ ${o} run build:desktop
\`\`\`

will create distributable native app package
` : ""}
	`
    )
  ])
);
process.chdir(l);
r("- downloading example sprites");
for (const e of v.matchAll(F)) {
  const [, t, n, i] = e, s = w.join(D, i);
  if (i.startsWith("sprites") || i.startsWith("/sprites") || i.startsWith("./sprites")) {
    r(`- downloading sprite "${n}"`), u(`- sprite full url: ${s}`);
    try {
      await x(s, w.join("public", i));
    } catch (m) {
      r(`- error while downloading sprite "${n}"`), u(`- error: ${m}`);
    }
  } else {
    r(`- downloading ${t.toLowerCase()} "${n}"`), u(`- ${t.toLowerCase()} full url: ${s}`);
    try {
      await x(s, w.join("public", "examples", i));
    } catch (m) {
      r(`- error while downloading ${t.toLowerCase()} "${n}"`), u(`- error: ${m}`);
    }
  }
}
r(`- installing packages ${I.map((e) => `"${e}"`).join(", ")}`);
await k(o, [A, ...I], {
  stdio: ["inherit", "ignore", "inherit"]
});
r(
  `- installing dev packages ${L.map((e) => `"${e}"`).join(", ")}`
);
await k(o, [A, "-D", ...L], {
  stdio: ["inherit", "ignore", "inherit"]
});
if (g) {
  r("- starting tauri project for desktop build"), u(`- running ${o} tauri init`), await k(
    j,
    [
      "tauri",
      "init",
      "--app-name",
      l,
      "--window-title",
      l,
      "--dist-dir",
      "../dist",
      "--dev-path",
      "http://localhost:8000",
      "--before-dev-command",
      C(`${o} run dev`),
      "--before-build-command",
      C(`${o} run build`),
      "--ci"
    ],
    { stdio: "inherit" }
  );
  try {
    await x(
      "https://raw.githubusercontent.com/kaplayjs/kaplay/master/examples/sprites/k.png",
      "public/icon.png"
    );
  } catch (e) {
    r("- error while downloading icon"), u(`- error: ${e}`);
  }
  await k(j, ["tauri", "icon", "public/icon.png"], {
    stdio: "inherit"
  }), V("src-tauri/tauri.conf.json", (e) => (e.tauri.bundle.identifier = "com.kaplay.dev", e));
}
console.log("");
console.log(
  `
Success! Now run:

$ cd ${l}
$ ${o} ${q}

and start editing src/main.${$}! ðŸ¦–
--------------------------------------------
Consider donating to KAPLAY:
ðŸ’– https://opencollective.com/kaplay
`.trim()
);
